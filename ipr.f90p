! calculate real space PR on k space
! PR^S=sum_k((sum_cvk`(Acvk`S*Acv(k-k`)S))^2)
! doesn't seem to work now


! input: ne
! read from files: eigenvectors
! write to files: energy.dat

program ipr
  use typedefs
  use nrtype
  use mat
  implicit none
  integer :: ns, nv, nc, nk, ie, ik, ic, iv, is, ik1, ik2, ix, iy, iz
#ifdef CPLX
  complex(dpc), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#else
  real(dp), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#endif
  real(dp), allocatable :: energy(:), iprout(:)! j%ne
  real(dp), allocatable :: kk(:,:) ! 3, nk
  integer, allocatable :: kkmap(:,:) ! nk, nk
  logical :: lbreak
  real(dp) :: Avcke, ipr0, kp0(3), kp1(3)
  type(joblist) :: jobs
  integer :: ierr
  character(len=80) :: filename
  character(len=11) :: cdate
  character(len=14) :: ctime

  open(unit=881,file="out.dat",status="replace")
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " Start Time: ", cdate, ctime


  call readin(jobs)

  if (jobs%ne==0) then
    call die("ne=0. need input")
  endif

  write(881,*)
  write(881,*) "reading file eigenvectors headers"
  open(unit=10,file="eigenvectors",form='unformatted',status='old')
  read(10) ns
  read(10) nv
  read(10) nc
  read(10) nk

  write(881,'(a,i0)') " ns = ", ns
  write(881,'(a,i0)') " nv = ", nv
  write(881,'(a,i0)') " nc = ", nc
  write(881,'(a,i0)') " nk = ", nk

  allocate(kk(3,nk))
  read(10) kk(:,:) ! kpoints

  do ik=1, nk
    do ix=1,3
      if (kk(ix,ik)< -1.d-6) then 
        kk(ix,ik)=kk(ix,ik)+1.d0
      elseif (kk(ix,ik)> 1-1.d-6) then
        kk(ix,ik)=kk(ix,ik)-1.d0
      endif
    enddo
  enddo

  allocate(kkmap(nk,nk))
  kkmap = 0
  do ik1=1, nk
    do ik2=1, nk

      kp0=kk(:,ik1)-kk(:,ik2)
      lbreak=.false.
      do ix=1,3
        if (kp0(ix)< -1.d-6) then 
          kp0(ix)=kp0(ix)+1.d0
        elseif (kp0(ix)> 1-1.d-6) then
          kp0(ix)=kp0(ix)-1.d0
        endif
      enddo
      do ik=1, nk
        if (equal(kp0,kk(:,ik))) then
          kkmap(ik1,ik2)=ik
          exit
        endif
      enddo ! ik
    write(*,*) ik1, ik2, kkmap(ik1,ik2)
    enddo ! ik2
  enddo ! ik1


  write(881,*)
  write(881,*) "reading file eigenvectors"

  allocate(Ae(ns,nv,nc,nk))
  allocate(energy(jobs%ne))
  allocate(iprout(jobs%ne))
  iprout=0.d0

  do ie = 1, jobs%ne
    read(10) energy(ie)
    read(10) Ae
    do ik1 = 1, nk
      ipr0=0.d0
        
        do ic = 1, nc
          do iv = 1, nv
            do is = 1, ns
      do ik2 = 1, nk
#ifdef CPLX
              ipr0 = ipr0 + Ae(is,iv,ic,ik) * conjg(Ae(is,iv,ic,kkmap(ik1,ik2))) ! need work
#else
              ipr0 = ipr0 + Ae(is,iv,ic,ik2) * Ae(is,iv,ic,kkmap(ik1,ik2))
#endif
      enddo ! ik2
            enddo ! is
          enddo ! iv
        enddo ! ic
      iprout(ie)=iprout(ie)+ipr0*ipr0
    enddo ! ik1
  enddo ! ie
  close(10)
  deallocate(Ae)



  open(unit=15,file="ipr.dat",status="replace")
  write(15,*) "exciton Eexciton(eV) IPR"
  do ie = 1, jobs%ne
    write(15,"(i6, f9.5,f15.5)") ie, energy(ie), iprout(ie)
  enddo
  close(15)

  deallocate(iprout)
  deallocate(kk)
  deallocate(kkmap)
!  deallocate(Avcke)
  deallocate(energy)
  write(881,*) 
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " End Time: ", cdate, ctime
endprogram ipr
