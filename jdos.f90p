! calculate joint density of state of exciton states
! gS(w)=sum_vck(AvckS^2*delta(Eck-Evk-Ew))

program jdos
  use typedefs
  use nrtype
  implicit none
  integer :: ns, nv, nc, nk, nmat, ie, imat, ik, ic, iv, is, ij
#ifdef CPLX
  complex(dpc), allocatable :: Aread(:) ! nmat
#else
  real(dp), allocatable :: Aread(:)! nmat
#endif
!  real(dp), allocatable :: Avcke(:,:,:,:) ! nv, nc, nk, j%ne
  real(dp), allocatable :: energy(:), Asum(:)! j%ne
  logical, allocatable :: lwdos(:) ! j%ne
  real(dp), allocatable :: Ec(:,:) ! nc, nk
  real(dp), allocatable :: Ev(:,:) ! nv, nk
  real(dp), allocatable :: kk(:,:)
  real(dp), allocatable :: fjdos(:), ejdos(:) ! nj=1000
  real(dp) :: Avcke
  type(joblist) :: jobs
  integer :: ierr
  character(len=80) :: filename
  character(len=11) :: cdate
  character(len=14) :: ctime

  open(unit=881,file="out.dat",status="replace")
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " Start Time: ", cdate, ctime


  call readin(jobs)
  if (jobs%nwstates==0) then
    call die("jobs%nwstates=0. need input")
  endif
  jobs%ne=maxval(jobs%iwstates)
  
  write(881,'(a)') " change ne to max(iwstates) "
  write(881,'(a,i0)') " ne = ", jobs%ne

  allocate(lwdos(jobs%ne))
  lwdos=.false.
  do ij =1, jobs%nwstates
    lwdos(jobs%iwstates(ij))=.true.
  enddo ! ij
    

  write(881,*)
  write(881,*) "reading file eigenvectors headers"
  open(unit=10,file="eigenvectors",form='unformatted',status='old')


  read(10) ns
  read(10) nv
  read(10) nc
  read(10) nk
  nmat=ns*nv*nc*nk

  write(881,'(a,i0)') " ns = ", ns
  write(881,'(a,i0)') " nv = ", nv
  write(881,'(a,i0)') " nc = ", nc
  write(881,'(a,i0)') " nk = ", nk
  write(881,'(a,i0)') " nmat = ", nmat

  allocate(kk(3,nk))
  read(10) kk(:,:) ! kpoints

  allocate(Ec(nc,nk))
  allocate(Ev(nv,nk))
  call readeqp(jobs,nv,nc,nk,Ec,Ev,kk)

  write(881,*)
  write(881,*) "reading file eigenvectors"

  allocate(Aread(nmat))
!  allocate(Avcke(nv,nc,nk,jobs%ne))
  allocate(energy(jobs%ne))
  allocate(Asum(jobs%ne))
  allocate(fjdos(1000))
  allocate(ejdos(1000))

  do ij = 1, 1000
    ejdos(ij)=dble(ij-1)*1.d-2
  enddo ! ij

  Asum=0.d0

  do ie = 1, jobs%ne
    if (lwdos(ie)==.false.) then
      read(10) ! energy(ie)
      read(10) ! Aread(:)
      cycle
    endif
    fjdos=0.d0
    read(10) energy(ie)
    read(10) Aread(:)
    imat = 0
    do ik = 1, nk
      do ic = 1, nc
        do iv = 1, nv
          do is = 1, ns
            imat=ik-1
            imat=imat*nc+ic-1
            imat=imat*nv+iv-1
            imat=imat*ns+is ! -1+1
#ifdef CPLX
            Avcke = Aread(imat) * conjg(Aread(imat))
#else
            Avcke = Aread(imat) **2
#endif
            Asum(ie)=Asum(ie)+Avcke
            
            do ij = 1, 1000
!              xx=Ec(ic,ik)-Ev(iv,ik)-ejdos
              fjdos(ij)=fjdos(ij)+Avcke*0.3989422804014326779399/jobs%sigma*exp(-0.5*((Ec(ic,ik)-Ev(iv,ik)-ejdos(ij))/jobs%sigma)**2)
            enddo ! ij
          enddo ! is
        enddo ! iv
      enddo ! ic
    enddo ! ik

    write(filename,'(a,i0,a)') "ehdos_",ie,".dat"
    open(unit=16,file=filename,form="formatted",status="replace")
    do ij = 1, 1000
      write(16,'(f6.2,f18.9)') ejdos(ij), fjdos(ij)
    enddo ! ij
  enddo ! ie

  close(10)
  deallocate(Aread)

  if (maxval(Asum)<1.d0+1.d-6 .and. minval(Asum)>1.d0-1.d-6) then
    write(881,*)"AvckS normalization checked, sum_vck(|AvckS|^2)=1"
  else
    write(881,*)"AvckS is not normalized, sum_vck(|AvckS|^2) /= 1"
    do ie = 1, jobs%ne
      write(881,"(i6,f9.5)") ie,Asum(ie)
    enddo ! ie
    call die("AvckS is not normalized")
  endif
  deallocate(Asum)



  deallocate(Ev)
  deallocate(Ec)
  deallocate(kk)
!  deallocate(Avcke)
  deallocate(energy)
  write(881,*) 
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " End Time: ", cdate, ctime
endprogram jdos

subroutine date_time(bdate,btime)
  ! returns:
  ! - bdate: string with date
  ! - btime: string with time
  character(len=11), intent(out) :: bdate
  character(len=14), intent(out) :: btime
  !
  integer :: lmonth
  integer :: idate(8)
  character(len=10) :: atime
  character(len=8) :: adate
  character(len=5) :: azone
  character(len=4) :: year
  character(len=3) :: month(12)
  character(len=2) :: hour, min, sec, day
  !
  DATA month/'Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep', &
       'Oct','Nov','Dec'/
  !

  call date_and_time(adate,atime,azone,idate)
  read(adate,"(a4,i2,a2)") year, lmonth, day
  write(bdate,"(a2,a1,a3,a1,a4)") day, '-', month(lmonth), '-', year
  read(atime,'(a2,a2,a2,a4)') hour, min, sec
  write(btime,"(a2,a1,a2,a1,a2,1x,a5)") hour, ':', min, ':', sec, azone
  !
  return
end subroutine date_time


subroutine die(str)!,id_cpu)
!  use mpi
  implicit none
  character (len=*) :: str
  integer :: ierr
!  integer, intent(In), optional :: id_cpu

  write(*,*)
  write(*,*) "Stop! ERROR in: ", Trim(str)
!  if (present(id_cpu)) write(*,*) "At cpu",id_cpu
  write(*,*)
  stop
!  call MPI_Abort(MPI_COMM_WORLD, 0, ierr)

endsubroutine die



