! Find the band gap weighted by the e-h amplitude
! Eg^S=sum_cvk((A_cvkS)^2*(Eck-Evk+q))
! Calculate the ipr of the e-h amplitude
! IPR^S=sum_cvk(AcvkS^2)^2/sum_cvk(AcvkS^4)
! Normalization condition: AcvkS^2==1
! IPR^S=1/sum_cvk(AcvkS^4)

! input: (ne)
! read from files: eigenvectors eqp.dat (eqp_q.dat) (eigenvalues.dat)
! write to files: energy.dat

program ebg
  use typedefs
  use nrtype
  implicit none
  integer :: ns, nv, nc, nk, ie, ik, ic, iv, is, ne_all
#ifdef CPLX
  complex(dpc), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#else
  real(dp), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#endif
  real(dp) :: energy, Egap, Eb, ipr
  real(dp), allocatable :: Asum(:), d2(:), e_save(:)! j%ne
  real(dp), allocatable :: Ec(:,:) ! nc, nk
  real(dp), allocatable :: Ev(:,:) ! nv, nk
  real(dp), allocatable :: kk(:,:) ! 3, nk
  real(dp) :: Avcke, ipr0
  type(joblist) :: jobs
  logical :: lfile
  integer :: ierr
  character(len=80) :: filename,something
  character(len=11) :: cdate
  character(len=14) :: ctime

  open(unit=881,file="out.dat",status="replace")
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " Start Time: ", cdate, ctime

  call readin(jobs)
  ! if ne is given in input then read it
  ! if input doesn`t exist try reading it from eigenvalues.dat
  ! if eigenvalues.dat doesn`t exist, read it as ns*nv*nc*nk in eigenvectors

  lfile=.False.
  inquire(file="eigenvalues.dat",exist=lfile)
  if (lfile) then
    write(881,*)
    write(881,*) "eigenvalues.dat exists"
    open(unit=25,file="eigenvalues.dat",status="old")
    read(25,*) something, something, something, ne_all
    if (jobs%ne==0) then
      write(881,*) "ne is read from eigenvalues.dat"
      jobs%ne=ne_all
      write(881,'(a,i0)') " ne = ", jobs%ne
    elseif (jobs%ne>ne_all) then
      write(881,*) "ne from input is larger than from eigenvalues.dat. reset ne"
      jobs%ne=ne_all
      write(881,'(a,i0)') " ne = ", jobs%ne
    endif
     
    read(25,*)
    read(25,*)
    read(25,*)
  else
    write(881,*) "eigenvalues.dat doesn`t exist"
  endif ! lfile

  write(881,*)
  write(881,*) "reading file eigenvectors headers"
  open(unit=10,file="eigenvectors",form='unformatted',status='old')
  read(10) ns
  read(10) nv
  read(10) nc
  read(10) nk
  write(881,'(a,i0)') " ns = ", ns
  write(881,'(a,i0)') " nv = ", nv
  write(881,'(a,i0)') " nc = ", nc
  write(881,'(a,i0)') " nk = ", nk

  if (lfile .and. ne_all>ns*nv*nc*nk) then
    write(881,"(a,i0,a,i0)") " Warning: ne from eigenvalues.dat ", ne_all, " > ns*nv*nc*nk ", ns*nc*nv*nk
  endif 

  if (jobs%ne==0) then
    write(881,*) "ne is calculated from ns*nv*nc*nk"
    jobs%ne=ns*nv*nc*nk
    write(881,'(a,i0)') " ne = ", jobs%ne
  elseif (jobs%ne>ns*nv*nc*nk) then
    write(881,*) "ne is larger than ns*nv*nc*nk. reset ne"
    jobs%ne=ns*nv*nc*nk
    write(881,'(a,i0)') " ne = ", jobs%ne
  endif

  if (lfile) then
    write(881,*)
    write(881,*) "reading |dipole|^2 from eigenvalues.dat"
    allocate(d2(jobs%ne))
    allocate(e_save(jobs%ne))
    do ie = 1, jobs%ne 
      read(25,*) e_save(ie), d2(ie)
    enddo
  endif ! lfile
! renormalize |dipole|^2 by nk
  d2=d2/nk


  allocate(kk(3,nk))
  read(10) kk(:,:) ! kpoints

  allocate(Ec(nc,nk))
  allocate(Ev(nv,nk))
  call readeqp(jobs,nv,nc,nk,Ec,Ev,kk)

  write(881,*)
  write(881,*) "reading file eigenvectors"

  allocate(Ae(ns,nv,nc,nk))
  allocate(Asum(jobs%ne))
  Asum=0.d0

  open(unit=15,file="energy.dat",status="replace")
  if (lfile) then
    write(15,*) "#exciton Eexciton(eV) Egap(eV) Ebinding(eV) IPR |dipole|^2"
  else
    write(15,*) "#exciton Eexciton(eV) Egap(eV) Ebinding(eV) IPR"
  endif

  do ie = 1, jobs%ne
    Egap=0.d0
    ipr=0.d0
    read(10) energy
    if (lfile .and. dabs(energy-e_save(ie))>1.e-4) then
      write(881,"(a,i0,a)") " Warning: ",ie," energy doesn't match"
      write(881,"(a,f10.6,a,f10.6)") "  eigenvalues.dat:",e_save(ie),"  eigenvectors:",energy
    endif
    read(10) Ae
    do ik = 1, nk
      ipr0=0.d0
      do ic = 1, nc
        do iv = 1, nv
          do is = 1, ns
#ifdef CPLX
            Avcke = Ae(is,iv,ic,ik) * conjg(Ae(is,iv,ic,ik))
#else
            Avcke = Ae(is,iv,ic,ik) * Ae(is,iv,ic,ik)
#endif
            Egap=Egap+Avcke*(Ec(ic,ik)-Ev(iv,ik))
            Asum(ie)=Asum(ie)+Avcke
            ipr0=ipr0+Avcke
          enddo ! is
        enddo ! iv
      enddo ! ic
      ipr=ipr+ipr0*ipr0
    enddo ! ik
    ipr=Asum(ie)*Asum(ie)/ipr

    Eb=Egap-energy
    if (Eb<1.d-6) then
      write(881,"(a,i0,a,f9.5,a)") " Warning: ", ie, " negative Eb ", Eb, " eV"
    endif 
    if (lfile) then
      write(15,"(i6, 3f9.5,f12.5,e16.8)") ie, energy, Egap, Eb, ipr, d2(ie)
    else
      write(15,"(i6, 3f9.5,f12.5)") ie, energy, Egap, Eb, ipr
    endif
    
  enddo ! ie
  close(10)
  close(15)
  deallocate(Ae)

  write(881,*)
  if (maxval(Asum)<1.d0+1.d-6 .and. minval(Asum)>1.d0-1.d-6) then
    write(881,*)"AvckS normalization checked, sum_vck(|AvckS|^2)=1"
  else
    write(881,*)"AvckS is not normalized, sum_vck(|AvckS|^2) /= 1"
    do ie = 1, jobs%ne
      write(881,"(i6,f9.5)") ie,Asum(ie)
    enddo ! ie
    call die("AvckS is not normalized")
  endif
  deallocate(Asum)

  deallocate(Ev)
  deallocate(Ec)
  deallocate(kk)
  if (lfile) then
    deallocate(d2)
    deallocate(e_save)
  endif
  write(881,*) 
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " End Time: ", cdate, ctime
endprogram ebg
