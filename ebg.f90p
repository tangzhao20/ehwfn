! find the band gap weighted by each exciton states
! Eg^S=sum_cvk((A_cvk^S)^2*(Eck-Evk+q))

! input: ne

program ebg
  use typedefs
  use nrtype
  implicit none
  integer :: ns, nv, nc, nk, ie, ik, ic, iv, is
#ifdef CPLX
  complex(dpc), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#else
  real(dp), allocatable :: Ae(:,:,:,:) ! ns, nv, nc, nk
#endif
  real(dp), allocatable :: energy(:) ,Egap(:), Eb(:), Asum(:)! j%ne
  real(dp), allocatable :: Ec(:,:) ! nc, nk
  real(dp), allocatable :: Ev(:,:) ! nv, nk
  real(dp), allocatable :: kk(:,:) ! 3, nk
  real(dp) :: Avcke
  type(joblist) :: jobs
  integer :: ierr
  character(len=80) :: filename
  character(len=11) :: cdate
  character(len=14) :: ctime

  open(unit=881,file="out.dat",status="replace")
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " Start Time: ", cdate, ctime


  call readin(jobs)

  if (jobs%ne==0) then
    call die("ne=0. need input")
  endif

  write(881,*)
  write(881,*) "reading file eigenvectors headers"
  open(unit=10,file="eigenvectors",form='unformatted',status='old')
  read(10) ns
  read(10) nv
  read(10) nc
  read(10) nk

  write(881,'(a,i0)') " ns = ", ns
  write(881,'(a,i0)') " nv = ", nv
  write(881,'(a,i0)') " nc = ", nc
  write(881,'(a,i0)') " nk = ", nk

  allocate(kk(3,nk))
  read(10) kk(:,:) ! kpoints

  allocate(Ec(nc,nk))
  allocate(Ev(nv,nk))
  call readeqp(jobs,nv,nc,nk,Ec,Ev,kk)

  write(881,*)
  write(881,*) "reading file eigenvectors"

  allocate(Ae(ns,nv,nc,nk))
  allocate(energy(jobs%ne))
  allocate(Asum(jobs%ne))
  allocate(Egap(jobs%ne))
  allocate(Eb(jobs%ne))
  Asum=0.d0
#ifdef CPLX
  Egap=(0.d0,0.d0)
!  Avcke=(0.d0,0.d0)
#else
!  Avcke=0.d0
  Egap=0.d0
#endif

  do ie = 1, jobs%ne
    read(10) energy(ie)
    read(10) Ae
    do ik = 1, nk
      do ic = 1, nc
        do iv = 1, nv
          do is = 1, ns
#ifdef CPLX
            Avcke = Ae(is,iv,ic,ik) * conjg(Ae(is,iv,ic,ik))
#else
            Avcke = Ae(is,iv,ic,ik) **2
#endif
            Egap(ie)=Egap(ie)+Avcke*(Ec(ic,ik)-Ev(iv,ik))
            Asum(ie)=Asum(ie)+Avcke
          enddo ! is
        enddo ! iv
      enddo ! ic
    enddo ! ik

  enddo ! ie
  close(10)
  deallocate(Ae)

  if (maxval(Asum)<1.d0+1.d-6 .and. minval(Asum)>1.d0-1.d-6) then
    write(881,*)"AvckS normalization checked, sum_vck(|AvckS|^2)=1"
  else
    write(881,*)"AvckS is not normalized, sum_vck(|AvckS|^2) /= 1"
    do ie = 1, jobs%ne
      write(881,"(i6,f9.5)") ie,Asum(ie)
    enddo ! ie
    call die("AvckS is not normalized")
  endif
  deallocate(Asum)


  Eb=Egap-energy
  open(unit=15,file="energy.dat",status="replace")
  write(15,*) "exciton Eexciton(eV) Egap(eV) Ebinding(eV)"
  do ie = 1, jobs%ne
    write(15,"(i6, 3f9.5)") ie, energy(ie), Egap(ie), Eb(ie)
  enddo
  close(15)

  deallocate(Eb)
  deallocate(Egap)
  deallocate(Ev)
  deallocate(Ec)
  deallocate(kk)
!  deallocate(Avcke)
  deallocate(energy)
  write(881,*) 
  call date_time(cdate, ctime)
  write(881,'(a,a11,1x,a14)') " End Time: ", cdate, ctime
endprogram ebg
